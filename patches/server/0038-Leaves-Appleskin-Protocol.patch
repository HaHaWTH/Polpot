From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HaHaWTH <id_cn00@outlook.com>
Date: Mon, 15 Jan 2024 12:55:11 +0800
Subject: [PATCH] Leaves-Appleskin-Protocol


diff --git a/src/main/java/io/wdsj/polpot/configuration/DivineConfig.java b/src/main/java/io/wdsj/polpot/configuration/DivineConfig.java
index 9aa1687e11d62b16f8889f04a4f44d9f2a0a022b..38c976df26fe9bbee263210ccf5ee96b65c6abbe 100644
--- a/src/main/java/io/wdsj/polpot/configuration/DivineConfig.java
+++ b/src/main/java/io/wdsj/polpot/configuration/DivineConfig.java
@@ -159,10 +159,15 @@ public class DivineConfig {
     }
 
     public static boolean snowballAndEggCanKnockback = false;
-    private static void SnowballAndEggCanKnockback() {
+    private static void snowballAndEggCanKnockback() {
         snowballAndEggCanKnockback = getBoolean("settings.snowball-egg-knockback-players", snowballAndEggCanKnockback);
     }
 
+    public static boolean enableAppleSkinProtocol = false;
+    private static void enableAppleSkinProtocol() {
+        enableAppleSkinProtocol = getBoolean("network.protocol.leaves-appleskin-protocol", enableAppleSkinProtocol);
+    }
+
     public static int linearFlushFrequency = 10;
     public static int linearFlushThreads = 1;
     private static void regionFormatSettings() {
diff --git a/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..fd6ca581a2a04ab3121503b9e89cbb0caa6015d4
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java
@@ -0,0 +1,93 @@
+package top.leavesmc.leaves.protocol;
+
+import io.wdsj.polpot.configuration.DivineConfig;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.food.FoodData;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.protocol.core.LeavesProtocol;
+import top.leavesmc.leaves.protocol.core.ProtocolHandler;
+import top.leavesmc.leaves.protocol.core.ProtocolUtils;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+@LeavesProtocol(namespace = "appleskin")
+public class AppleSkinProtocol {
+    public static final String PROTOCOL_ID = "appleskin";
+    private static final ResourceLocation SATURATION_KEY = id("saturation_sync");
+    private static final ResourceLocation EXHAUSTION_KEY = id("exhaustion_sync");
+    private static final Map<UUID, Float> previousSaturationLevels = new HashMap<>();
+    private static final Map<UUID, Float> previousExhaustionLevels = new HashMap<>();
+
+    private static final float MINIMUM_EXHAUSTION_CHANGE_THRESHOLD = 0.01F;
+    private static final Set<ServerPlayer> players = new HashSet<>();
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+    @ProtocolHandler.PlayerJoin
+    public static void onPlayerLoggedIn(@NotNull ServerPlayer player) {
+        if (DivineConfig.enableAppleSkinProtocol) {
+            resetPlayerData(player);
+        }
+    }
+
+    @ProtocolHandler.PlayerLeave
+    public static void onPlayerLoggedOut(@NotNull ServerPlayer player) {
+        if (DivineConfig.enableAppleSkinProtocol) {
+            players.remove(player);
+            resetPlayerData(player);
+        }
+    }
+    @ProtocolHandler.MinecraftRegister(ignoreId = true)
+    public static void onPlayerSubscribed(@NotNull ServerPlayer player) {
+        if (DivineConfig.enableAppleSkinProtocol) {
+            players.add(player);
+        }
+    }
+    @ProtocolHandler.Ticker
+    public static void tick() {
+        if (DivineConfig.enableAppleSkinProtocol) {
+            for (ServerPlayer player : players) {
+                FoodData data = player.getFoodData();
+                float saturation = data.getSaturationLevel();
+                Float previousSaturation = previousSaturationLevels.get(player.getUUID());
+                if (previousSaturation == null || saturation != previousSaturation) {
+                    ProtocolUtils.sendPayloadPacket(player, SATURATION_KEY, buf -> {
+                        buf.writeFloat(saturation);
+                    });
+                    previousSaturationLevels.put(player.getUUID(), saturation);
+                }
+                float exhaustion = data.getExhaustionLevel();
+                Float previousExhaustion = previousExhaustionLevels.get(player.getUUID());
+                if (previousExhaustion == null || Math.abs(exhaustion - previousExhaustion) >= MINIMUM_EXHAUSTION_CHANGE_THRESHOLD) {
+                    ProtocolUtils.sendPayloadPacket(player, EXHAUSTION_KEY, buf -> {
+                        buf.writeFloat(exhaustion);
+                    });
+                    previousExhaustionLevels.put(player.getUUID(), exhaustion);
+                }
+            }
+        }
+    }
+
+    @ProtocolHandler.ReloadServer
+    public static void onServerReload() {
+        if (!DivineConfig.enableAppleSkinProtocol) {
+            disableAllPlayer();
+        }
+    }
+    public static void disableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedOut(player);
+        }
+    }
+    private static void resetPlayerData(@NotNull ServerPlayer player) {
+        previousExhaustionLevels.remove(player.getUUID());
+        previousSaturationLevels.remove(player.getUUID());
+    }
+}
